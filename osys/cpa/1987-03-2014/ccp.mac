.Z80
.CREF
.XALL

NAME	('CCPMOD')
TITLE	CP/A Console Command Processor, CCP, Version 2.2 Mar, 1987
SUBTTL	Copyright (c) 1976-1980 Digital Research, 1987 AoS GDR

;*****************************************************************
;*  Sources for CP/M 2.2 in Assembly language were provided by   *
;*                                                               *
;*               "The Unofficial CP/M Web site"                  *
;*                                                               *
;*  For the CP/M software on this site, including the Original   *
;*  Source Code, there's a special license by Lineo, Inc.  The   *
;*  previous license by Caldera isn't valid any more.            *
;*                                                               *
;*  License agreement for the CP/M material presented on "The    *
;*  Unofficial CP/M Web site":                                   *
;*                                                               *
;*  Download:  http://www.cpm.z80.de/license.html                *
;*  Subject:   Re: Unofficial CP/M Website/licensing of          *
;*             CP/M material                                     *
;*  To:        gaby@gaby.de                                      *
;*  Date sent: Fri, 19 Oct 2001 10:36:31 -0600                   *
;*                                                               *
;*  Let this email represent a right to use, distribute, modify, *
;*  enhance and otherwise make available in a nonexclusive       *
;*  manner the CP/M technology as part of the "Unofficial CP/M   *
;*  Web Site" with its maintainers, developers and community.    *
;*                                                               *
;*  I further state that as Chairman and CEO of Lineo, Inc. that *
;*  I have the right to do offer such a license.                 *
;*                                                               *
;*  Lineo and its affiliates, partners and employees make no     *
;*  warranties of any kind with regards to this technology and   *
;*  its usefulness or lack thereof.                              *
;*                                                               *
;*  ---                                                          *
;*  Bryan Sparks                                                 *
;*  CEO   Lineo, Inc.                                            *
;*  http://www.lineo.com                                         *
;*****************************************************************

PAGE	72

;	assembly language version of the
;	CP/A console command processor, derived from original
;	CP/M console command processor with special extensions

;	Copyright (c) 1987
;	Academy of Sciences of the GDR
;	Institute of computer science and technology
;	CP/A CCP rebuild from original Digital Research code


;	version 2.2 March, 1987


;	Derived from http://hc-ddr.hucki.net/wiki/doku.php/cpm:cpa
;	08/31/2013 : 'cpa biop 861106.zip' from archive 'cpa.zip'
;	http://hc-ddr.hucki.net/wiki/lib/exe/fetch.php/cpm:cpa.zip


;	Copyright (c) 1976, 1977, 1978, 1979, 1980
;	Digital Research
;	Box 579, Pacific Grove,
;	California, 93950


;	version 2.2 February, 1980


;	Derived from http://www.cpm.z80.de/source.html
;	05/26/2002 : http://www.cpm.z80.de/download/cpm2-plm.zip


;for CP/A with changes of 06.03.87  St.Linz   31.07.2014
;for M80-assembler and realocation  St.Linz   27.07.2014

;M80 CCP.ERL,CCP.LST=CPACCP/M/Z
;LINKMT CCP=CCP/P:0C000


FALSE	EQU	0000H
TRUE	EQU	NOT FALSE
TESTING	EQU	FALSE		;true if debugging

	IF	TESTING
	ORG	3400H
	ELSE
	ORG	000H
	ENDIF

;
;	ccp entry and external symbols
;
ENTRY	CCP
BDOS	EQU	CCP+0800H	;bdos entry, EXTRN BDOS do not work, why?
BIOS	EQU	BDOS+0E00H	;bios entry, EXTRN BIOS do not work, why?

;
;	CP/M 2.2 has bdos value defined at top of module as BDOSL
;	CP/A     has bdos value defined as equation, changed to external
;

;
;	transient execution memory (TPA) calculation
;	TRANE = TRAN | addr(intrinsic function)
;	TRANC = TRANM - TRAND
;
TRAN	EQU	100H		;address of default transient execution memory
TRANM	EQU	$		;maximum of transient execution memory

PAGE

;	********************************************************
;	*	Base of CCP contains the following code/data   *
;	*	ccp:	jmp ccpstart	(start with command)   *
;	*		jmp ccpclear    (start, clear command) *
;	*	ccp+6	127		(max command length)   *
;	*	ccp+7	comlen		(command length = 00)  *
;	*	ccp+8	' ... '		(16 blanks)	       *
;	********************************************************
;	* Normal entry is at ccp, where the command line given *
;	* at ccp+8 is executed automatically (normally a null  *
;	* command with comlen = 00).  An initializing program  *
;	* can be automatically loaded by storing the command   *
;	* at ccp+8, with the command length at ccp+7.  In this *
;	* case, the ccp executes the command before prompting  *
;	* the console for input.  Note that the command is exe-*
;	* cuted on both warm and cold starts.  When the command*
;	* line is initialized, a jump to "jmp ccpclear" dis-   *
;	* ables the automatic command execution.               *
;	********************************************************
CCP:	JP	CCPSTART	;start ccp with possible initial command
	JP	CCPCLEAR	;clear the command buffer

MAXLEN:	DB	127		;max buffer length
COMLEN:	DB	0		;command length (filled in by dos)
;
;	(command executed initially if comlen non zero)
;
COMBUF:	DB 	"CP/A, ",CR,LF
	DB	"Akademie der Wissenschaften, ",CR,LF
	DB	"Institut fuer Informatik und Rechentechnik",CR,LF
	DB	"*****CCP*****, Version 06.03.87",CR,LF
	DB	EOFILE
	DS	128-($-COMBUF)
;
;	total buffer length is 128 characters
;
DISKA	EQU	0004H		;disk address for current disk
BDOSJ	EQU	0005H		;primary bdos entry point
BDOSA	EQU	0006H		;address field of jmp BDOS
BUFF	EQU	0080H		;default buffer
CLKADDR	EQU	0050H		;default CP/A date and time in BCD format
;
;	command file control block
;	CP/A uses the default block in CP/M zero page
;
FCB	EQU	005CH		;default file control block
CNTREC	EQU	FCB+32		;current record number
;
;	bdos access constants
;
RCHARF	EQU	1		;read character function
PCHARF	EQU	2		;print character function
DCIOF	EQU	6		;raw direct console i/o function
PBUFF	EQU	9		;print buffer function
RBUFF	EQU	10		;read buffer function
BREAKF	EQU	11		;break key function
LIFTF	EQU	12		;lift head function (no operation)
INITF	EQU	13		;initialize bdos function
SELF	EQU	14		;select disk function
OPENF	EQU	15		;open file function
CLOSEF	EQU	16		;close file function
SEARF	EQU	17		;search for file function
SEARNF	EQU	18		;search for next file function
DELF	EQU	19		;delete file function
DREADF	EQU	20		;disk read function
DWRITF	EQU	21		;disk write function
MAKEF	EQU	22		;file make function
RENF	EQU	23		;rename file function
LOGF	EQU	24		;return login vector
CSELF	EQU	25		;return currently selected drive number
DMAF	EQU	26		;set dma address
USERF	EQU	32		;set user number
;
;	bios access constants
;
BOOTO	EQU	3*0		;cold boot function
WBOOTO	EQU	3*1		;warm boot function
CONSTO	EQU	3*2		;console status function
CONINO	EQU	3*3		;console input function
CONOUTO	EQU	3*4		;console output function
LISTO	EQU	3*5		;list output function
PUNCHO	EQU	3*6		;punch output function
READERO	EQU	3*7		;reader input function
HOMEO	EQU	3*8		;disk home function
SELDSKO	EQU	3*9		;select disk function
SETTRKO	EQU	3*10		;set track function
SETSECO	EQU	3*11		;set sector function
SETDMAO	EQU	3*12		;set dma function
READO	EQU	3*13		;read disk function
WRITEO	EQU	3*14		;write disk function
LISTSTO	EQU	3*15		;list status function
SECTRANO EQU	3*16		;sector translate
;
;	special fcb flags       	
;
ROFILE	EQU	9		;read only file
SYSFILE	EQU	10		;system file flag
;
;	special characters      	
;
CR	EQU	13		;carriage return
LF	EQU	10		;line feed
LA	EQU	5FH		;left arrow
EOFILE	EQU	1AH		;end of file

PAGE

;
;	utility subroutines for intrinsic handlers
;
CRLF:	LD	A,CR
	CALL	PRINTBC
	LD	A,LF
	;(drop through to printbc)
;
PRINTBC:
	;print character, but save b,c registers
	PUSH	BC
	LD	E,A
	LD	C,PCHARF
	CALL	BDOSJ
	POP	BC
	RET
;
READERR:
	;print the read error message
	LD	BC,RDMSG
	JR	PRINT
;
SAVERR:	;print (must be) full or read only disk
	LD	BC,FULLMSG
	JR	PRINT
;
RENERR:	;print file already exists
	LD	BC,RENMSG
	JR	PRINT
;
NOFILE:	;print no file message
	LD	BC,NOFMSG
	;(drop through to print)
;
PRINT:	;print string starting at b,c until next '$' entry
	CALL	CRLF
	LD	D,B
	LD	E,C
	LD	C,PBUFF
	CALL	BDOSJ		;now print the string by bdos
	;(drop through to blank)
;
BLANK:	LD	A,' '
	JR	PRINTBC


DEL_SUB:
	;delete the submit file, and set submit flag to false
	LD	HL,SUBMIT+1
	LD	A,(HL)
	OR	A
	RET	Z		;return if no sub file
	LD	(HL),0		;submit flag is set to false
	DEC	A
	CALL	SELECT		;on drive a to erase file
	LD	DE,SUBFCB
	JR	DELETE


SAVEUSER:
	;save user#/disk# before possible ^c or transient
SUSER:	LD	A,0		;saved user area in argument
				;user0=0, user1=1, user2=2 ...
	PUSH	AF
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A		;rot left
CDISK:	OR	0		;current disk in argument
				;4b=user, 4b=disk
	LD	(DISKA),A	;stored away in memory for later
	AND	1111B
	CALL	SELECT
	POP	AF
	CALL	SETUSER
	;(drop through to setdmabuff)


SETDMABUFF:
	;set default buffer dma address
	LD	DE,BUFF	
	;(drop through to setdma)
;
SETDMA:	;set dma address to d,e
	LD	C,DMAF
	JR	BDOS_RET


SETUSER:
	;sets user number
	LD	(SWUSER+1),A
	LD	E,A
	LD	C,USERF
	JR	BDOS_RET


SELECTC:
	;select disk for current operation, if set
	XOR	A
	LD	(FCB),A
	LD	A,(SDISK+1)
	OR	A
	RET	Z
	DEC	A
	;(drop through to select)
;
SELECT:	;set and select working disk by a
	LD	(SWDISK+1),A
	LD	E,A
	LD	C,SELF
	JR	BDOS_RET


OPENC:	;open the file given by default fcb
	XOR	A
	LD	(CNTREC),A	;clear next record to read
	LD	DE,FCB
	;(drop through to open)
;
OPEN:	;open the file given by d,e
	LD	C,OPENF
	;(drop through to bdos_inr)


BDOS_INR:
	;counted bdos call, return inside ccp
	CALL	BDOSJ
	INC	A
	RET


CLOSEC:	;close the file given by default fcb
	LD	DE,FCB
	;(drop through to close)
;
CLOSE:	;close the file given by d,e
	LD	C,CLOSEF
	JR	BDOS_INR


SEARCHCOM:
	;search for the file given by default fcb
	LD	DE,FCB
	;(drop through to search)
;
SEARCH:	;search for the file given by d,e
	LD	C,SEARF
	JR	BDOS_INR


SEARCHN:
	;search for the next occurrence of the file given by d,e
	LD	C,SEARNF
	JR	BDOS_INR


DELETEC:
	;delete the file given by default fcb
	LD	DE,FCB
	;(drop through to delete)
;
DELETE:	;delete the file given by d,e
	LD	C,DELF
	;(drop through to bdos_ret)


BDOS_RET:
	;simple bdos call, indirectly return by bdos
	JP	BDOSJ


RENAMC:	;rename the file given by default fcb
	LD	DE,FCB
	;(drop through to renam)
;
RENAM:	;rename the file given by d,e
	LD	C,RENF
	JR	BDOS_RET


DISKREADC:
	;read the next record from the file given by default fcb
	LD	DE,FCB
	;(drop through to diskread)
;
DISKREAD:
	;read the next record from the file given by d,e
	LD	C,DREADF
	;(drop through to bdos_cond)


BDOS_COND:
	;conditioned bdos call, return inside ccp
	CALL	BDOSJ
	OR	A
	RET


DISKWRITEC:
	;write the next record to the file given by default fcb
	LD	DE,FCB
	;(drop through to diskwrite)
;
DISKWRITE:
	;write the next record to the file given by d,e
	LD	C,DWRITF
	JR	BDOS_COND


BREAK_KEY:
	;check for a character ready at the console
	LD	E,0FFH
	LD	C,DCIOF
	CALL	BDOS_COND	;character cleared
	RET	Z
	LD	BC,BRKMSG
	CALL	PRINT
	XOR	A
	INC	A
	RET


MAKEC:	;create the file given by default fcb
	CALL	DELETEC		;existing file removed
	LD	DE,FCB
	;(drop through to make)
;
MAKE:	;create the file given by d,e
	LD	C,MAKEF
	JR	BDOS_INR


TRANSLATE:
	;translate character in register A to upper case
	CP	61H
	RET	C		;return if below lower case a
	CP	7BH
	RET	NC		;return if above lower case z
	AND	5FH
	RET			;translated to upper case


READCOM:
	;read the next command into the command buffer
	;check for submit file
SUBMIT:	ld a,000h		;submit file mode in argument
				;00 if no submit file, ff if submitting
	OR	A
	JR	Z,NOSUB
	;scanning a submit file
	;change drives to open and read the file
	CALL	BREAK_KEY
	JP	NZ,COMERR2	;break key depressed
	LD	A,(SUBMIT+1)
	DEC	A
	CALL	SELECT
	;have to open again in case xsub present
	LD	DE,SUBFCB
	CALL	OPEN
	JR	Z,NOSUB		;skip if no sub
	LD	A,(SUBRC)
	DEC	A		;read last record(s) first
	LD	(SUBCR),A	;current record to read
	LD	DE,COMLEN
	CALL	SETDMA
	LD	DE,SUBFCB
	CALL	DISKREAD	;end of file if last record
	JR	NZ,NOSUB
	;disk read is ok, transfer to combuf
	;line is transferred, close the file with a
	;deleted record
	LD	HL,SUBMOD
	LD	(HL),0		;clear fwflag
	INC	HL
	DEC	(HL)		;one less record
	LD	DE,SUBFCB
	CALL	CLOSE
	JR	Z,NOSUB	
	;close went ok, return to original drive
	CALL	SAVEUSER
	JR	NOREAD
;
NOSUB:	;no submit file
	CALL	DEL_SUB
	;translate to upper case, store zero at end
	CALL	SAVEUSER	;user # save in case control c
	LD	C,RBUFF
	LD	DE,MAXLEN
	CALL	BDOSJ
;
NOREAD:	;enter here from submit file
	;set the last character to zero for later scans
	LD	HL,COMLEN
	LD	B,(HL)		;length is in b
	INC	B
;
READCOM1:
	INC	HL
	DJNZ	READCOM0
	;end of scan, h,l address end of command
	LD	(HL),B		;store a zero
	LD	HL,COMBUF
	LD	(COMADDR+1),HL	;ready to scan to zero
	RET
;
READCOM0:
	LD	A,(SUBMIT+1)
	OR	A		;echo of scan?
	JR	Z,SKIPECHO
	LD	A,(HL)		;get character and print
	PUSH	HL
	CALL	PRINTBC
	POP	HL
;
SKIPECHO:
	LD	A,(HL)		;get character and translate
	CALL	TRANSLATE
	LD	(HL),A
	JR	READCOM1


;
;	fcb scan and fill subroutine (entry is at fillfcb below)
;	fill the fcb, indexed by A (0 or 16)
;	subroutines
;
DELIM:	;look for a delimiter
	LD	A,(DE)
	OR	A
	RET	Z		;not the last element
	CP	' '
	JP	C,COMERR	;non graphic
	RET	Z		;treat blank as delimiter
	CP	'='
	RET	Z
	CP	LA
	RET	Z		;left arrow
	CP	'.'
	RET	Z
	CP	':'
	RET	Z
	CP	';'
	RET	Z
	CP	'<'
	RET	Z
	CP	'>'
	RET			;delimiter not found
;
DEBLANK:
	;deblank the input line
	LD	A,(DE)
	OR	A
	RET	Z		;treat end of line as blank
	CP	' '
	RET	NZ
	INC	DE
	JR	DEBLANK
;
SETSTADDR:
	;set starting address of current fillfcb request
	LD	DE,(COMADDR+1)
	CALL	DEBLANK
	LD	(STADDR+1),DE
	LD	A,(DE)
	OR	A
	RET


FILLFCB:
	;fill default fcb
	LD	HL,FCB
	;(drop through to fillfcbhl)
;
FILLFCBHL:
	;fill fcb given by h,l
	PUSH	HL		;fcb rescanned at end
	;d,e has command, h,l has fcb address
	;look for preceding file name A: B: ...
	CALL	SETSTADDR	;command address in d,e
	JR	Z,SETCUR0	;use current disk if empty command
	SUB	'A'-1
	JR	C,SETCUR0	;use current disk
	LD	B,A		;disk name held in b if : follows
	INC	DE
	LD	A,(DE)
	CP	':'
	JR	Z,SETDSK	;set disk name if :
;
SETCUR:	DEC	DE		;back to first character of command
;
SETCUR0:
	XOR	A
	LD	(SDISK+1),A	;clear selected disk (in case A:...)
	LD	A,(CDISK+1)	;use current disk
	JR	SETNAME
;
SETDSK:	LD	A,B
	LD	(SDISK+1),A	;mark as disk selected
	INC	DE		;past the :
;
SETNAME:
	;set the file name field
	LD	(HL),A
	LD	B,8		;file name length (max)
	CALL	SETNAM0
	LD	A,(DE)
	CP	'.'
	JR	NZ,SETTY0
	INC	DE
	CALL	SETNAM0
;
EFILL0:	XOR	A
	CALL	PADNAM0
	EX	DE,HL
	LD	(COMADDR+1),HL	;set new starting point
	;recover the start address of the fcb and count ?'s
	POP	HL
	LD	BC,11		;b=0, c=8+3
;
SCNQ:	INC	HL
	LD	A,(HL)
	CP	'?'
	JR	NZ,SCNQ0
	;? found, count it in b
	INC	B
;
SCNQ0:	DEC	C
	JR	NZ,SCNQ
	;number of ?'s in c, move to a and return with flags set
	LD	A,B
	OR	A
	RET
;
SETTY0:	CALL	PADNAME
	JR	EFILL0
;
SETNAM0:
	CALL	DELIM
	JR	Z,PADNAME	;not a delimiter
	INC	HL
	CP	'*'
	JR	NZ,SETNAM1	;must be ?'s
	LD	(HL),'?'
	JR	SETNAM2		;to dec count
;
SETNAM1:
	LD	(HL),A		;store character to fcb
	INC	DE
;
SETNAM2:
	DJNZ	SETNAM0		;count down length
;
TRNAME:	;end of name, truncate remainder
	CALL	DELIM
	JR	Z,SETTY		;set type field if delimiter
	INC	DE
	JR	TRNAME
;
PADNAME:
	LD	A,' '		;pad with blanks
;
PADNAM0:
	INC	HL
	LD	(HL),A
	DJNZ	PADNAM0		;count down length
;
SETTY:	;set the type field
	LD	B,3		;file type length
	RET


GETNUMBER:
	;read a number from the command line
	CALL	SETSTADDR	;command address in d,e
	JR	Z,CONVER	;break on error
	LD	C,0
	;value accumulated in c, overflow and buffer in b
CONV0:	CALL	DELIM
	JR	Z,CONVOK	;found delimiter
	INC	DE
	SUB	'0'
	CP	10
	JR	NC,CONVER	;valid?
	LD	B,A		;save value
	LD	A,C
	CP	11010B
	JR	NC,CONVER	;precursor conversion valid?
	ADD	A,A
	ADD	A,A
	ADD	A,C
	ADD	A,A		;*8+*2 = *10
	ADD	A,B		;+digit
	LD	C,A
	JR	NC,CONV0	;for another digit
;
CONVER:	;handle error condition
	JP	COMERR
;
CONVOK:	;end of digits
	LD	(COMADDR+1),DE
	LD	A,C		;recover value
	RET


SPLITNUM:
	;split a number of base of ten given by a
	LD	BC,0FF0AH	;(b=255, c=10)
;
CONV1:	INC	B
	SUB	C
	JR	NC,CONV1	;more then base of ten
	ADD	A,C		;recover one place value
	LD	C,A		;one place digit in c
	LD	A,B		;tens place digit in b
	CP	10		;valid? CF=0
	RET


INTRINSIC:
	;look for intrinsic functions (fcb has been filled)
	LD	DE,INTVEC	;beginning of entries
;
INTRIN0:
	LD	HL,FCB+1	;beginning of name
	LD	B,4		;length of match is in b
;
INTRIN1:
	LD	A,(DE)
	OR	A
	RET	Z		;table termination?
	CP	(HL)		;match?
	JR	NZ,INTRIN2	;skip if no match
	INC	DE
	INC	HL
	DJNZ	INTRIN1		;loop while matching
	;complete match on name, fetch vectors
	EX	DE,HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)		;correspond vector in d,e
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	DEC	HL
	LD	B,(HL)
	DEC	HL
	LD	C,(HL)		;precursor vector in b,c
	LD	(TRANP+1),BC	;...and save in TRANP
	SCF			;valid entry force CF=1
	RET
;
INTRIN2:
	;mismatch, move to next of intrinsic
	INC	DE
	DJNZ	INTRIN2
	INC	DE
	INC	DE
	JR	INTRIN0


COMREAD:
	;load user function
	LD	DE,FCB+9
	LD	A,(DE)
	CP	' '
	JR	NZ,RESTRAND	;type ' '
	LD	HL,COMTYPE	;.com
	LD	DE,FCB+9
	LD	BC,3
	LDIR			;file type is set to .com
;
RESTRAND:
	;reset TRAND to zero
	LD	HL,0
	LD	(TRAND+1),HL
	CALL	SELECTC
;
TRYOPEN:
	CALL	OPENC
	JR	NZ,COMRD0
	;file opened properly, read it into memory
;
RESWUSER:
	;reset SWUSER to zero
SWUSER:	LD	A,000H		;selected working user area in argument
				;user0=0, user1=1, user2=2 ...
	OR	A
	JR	Z,CHKWDISK	;is already zero
	XOR	A
	CALL	SETUSER		;reset user area to zero
	JR	TRYOPEN		;(re-)try again
;
CHKWDISK:
	;check SWDISK equal SCDISK
	LD	HL,SWDISK+1
SCDISK:	LD	A,0		;saved cold boot media disk in argument
				;none=0, a=1, b=2 ...
SWDISK:	CP	0		;selected working disk in argument
				;none=0, a=1, b=2 ...
	JR	Z,ERRFN		;current equal working disk?
	CALL	SELECT
	JR	TRYOPEN		;(re-)try again
;
COMRD0:	LD	DE,TRAN		;transient program base
;
COMRD1:	PUSH	DE		;save dma address
	CALL	SETDMA
	CALL	DISKREADC	;end of file if last record
	POP	HL		;recover dma address in h,l
	JR	NZ,COMEOF	;last record?
	LD	DE,128
	PUSH	HL		;save dma address
	LD	HL,(TRAND+1)
	ADD	HL,DE
	LD	(TRAND+1),HL	;increment TPA delta
	;sector loaded, set new dma address and compare
	POP	HL		;recover dma address in h,l
	ADD	HL,DE
	LD	BC,(TRANC+1)
	LD	DE,TRANM
	LD	A,D
	CP	B
	JR	Z,COMRD2
	DEC	B
;
COMRD2:	LD	D,H
	LD	E,L
	SBC	HL,BC
	JR	C,COMRD1	;has the load overflowed?
	CALL	SAVERR
;
ENDFN:	;normal exit point
	JP	ENDCOM
;
ERRFN:	;error exit point
	JP	COMERR
;
COMEOF:	;handle last record, there must be one in a
	DEC	A		;adjust bdos result in a
	CALL	NZ,READERR	;valid?
	RET

PAGE

CCPCLEAR:
	;clear the command buffer
	XOR	A
	LD	(COMLEN),A
	;(drop through to ccpstart)
;
CCPSTART:
	;enter here from boot loader
	LD	SP,STACK
	LD	HL,(SWBOOTA+1)	;origin bios warm boot address
	LD	A,H
	OR	L
	JR	Z,CCPS0		;nothing saved
	LD	HL,(TRANC+1)	;current upper TPA address
	DEC	HL
	DEC	HL
	DEC	HL
	LD	(BDOSA),HL	;set bdos entry over ccp
;
CCPS0:	LD	A,C
	AND	0FH		;disk number in accumulator
	LD	(CDISK+1),A	;clears user code nibble
	;(high order 4bits=user code, low 4bits=disk#)
	LD	A,C
	RRA
	RRA
	RRA
	RRA
	AND	0FH		;user code
	LD	(SUSER+1),A
	CALL	SETUSER		;user code selected
	;initialize for this user, get $ flag
	LD	C,INITF
	CALL	BDOSJ		;0ffh in accum if $ file present
	LD	A,H
	LD	(SCDISK+1),A
	INC	A
	INC	L
	JR	Z,CCPS1
	XOR	A
;
CCPS1:	;check for initial command
	LD	(SUBMIT+1),A	;submit flag set if $ file present
	LD	A,(COMLEN)
	OR	A
	JR	NZ,CCPE0	;assume typed already
;
CCPE:	;enter here on each command or error condition
	LD	SP,STACK
	CALL	SAVEUSER
	CALL	CRLF		;print d> prompt, where d is disk name
	LD	A,(SWDISK+1)	;get working disk number
	ADD	A,'A'
	CALL	PRINTBC
	LD	A,(SWUSER+1)	;get working user number
	OR	A
	JR	Z,CCPEUN	;zero, do not print it
	CALL	SPLITNUM
	OR	A
	JR	Z,CCPEUE0	;zero in tens place, do not print it
	;(drop through to ccpeue1)
;
CCPEUE1:
	;print tens place of user number given by a
	ADD	A,'0'
	CALL	PRINTBC
;
CCPEUE0:
	;print one place of user number given by c
	LD	A,C
	ADD	A,'0'
	CALL	PRINTBC
;
CCPEUN:	LD	A,'>'
	CALL	PRINTBC
	CALL	READCOM		;command buffer filled
;
CCPE0:	;(enter here from initialization with command full)
	CALL	SAVEUSER
	CALL	FILLFCB		;command fcb filled
	JP	NZ,COMERR	;the name cannot be an ambiguous reference
COMADDR:LD	HL,COMBUF	;address of next to char to scan in argument
	LD	(COMBLA+1),HL
	LD	A,(SDISK+1)
	OR	A
	JR	NZ,CCPE1
	LD	A,(FCB+5)
	CP	' '	
	JR	NZ,CCPE1
	;check for an intrinsic function
	CALL	INTRINSIC	;address of vector in d,l
	JP	C,LOAD0		;load, if found
;
CCPE1:	JP	USERFUNC	;... and execute

PAGE

;
;	individual intrinsics follow
;
DIRECT:	;directory search
	CALL	FILLFCB		;fcb gets file name
	CALL	SELECTC		;change disk drives if requested
	LD	HL,FCB+1
	LD	A,(HL)		;may be empty request
	CP	' '
	JR	NZ,DIR1		;skip fill of ??? if not blank
	;set comfcb to all ??? for current disk
	LD	B,11		;length of fill ????????.???
;
DIR0:	LD	(HL),'?'
	INC	HL
	DJNZ	DIR0
	;not a blank request, must be in fcb
;
DIR1:	CALL	SEARCHCOM
	JP	Z,NOFILE	;not found message
	LD	D,255
	PUSH	DE		;E counts directory entries
;
DIR2:	DEC	A		;get the location of the element
	RRCA
	RRCA
	RRCA
	AND	1100000B
	LD	HL,BUFF
	ADD	A,L
	LD	L,A
	;l contains base index into buff for dir entry
	PUSH	HL
	POP	IX
	BIT	7,(IX+10)
	JR	NZ,DIR6		;skip if system file
	;l holds index into buffer
	;another fcb found, new line?
	POP	AF
	INC	A
	;e=0,1,2,3,...new line if mod 4 = 0
	AND	11B
	PUSH	AF		;and save the test
	;may delete trailing blanks     	
	LD	A,' '
	JR	NZ,DIRHDR0	;header on current line
	CALL	CRLF
	;working disk in a
	LD	A,(SWDISK+1)
	ADD	A,'A'
;
DIRHDR0:
	CALL	PRINTBC
	LD	A,':'
	CALL	PRINTBC
	CALL	BLANK		;after last one
	LD	BC,00802H	;count b=8 char in name
				;count c=2 parts of file
;
DIR4:	INC	IX
	LD	A,(IX+0)
	AND	7FH		;mask flags
	CALL	PRINTBC
	DJNZ	DIR4
	DEC	C
	JR	Z,DIR6
	CALL	BLANK
	LD	B,3		;count b=3 char in type
	JR	DIR4
;
DIR6:	CALL	BREAK_KEY	;check for interrupt at keyboard
	JR	NZ,ENDIR	;abort directory search
	CALL	SEARCHN
	JR	NZ,DIR2		;for another entry
;
ENDIR:	JP	ENDFN

PAGE

ERASE:	;file erase
	CALL	FILLFCB		;cannot be all ???'s
	CP	11
	JR	NZ,ERASEFILE	
	;erasing all of the disk
	LD	BC,ERMSG
	CALL	PRINT
	CALL	READCOM
	LD	HL,COMLEN
	DEC	(HL)
	RET	NZ		;bad input
	;valid input
	INC	HL
	LD	A,(HL)
	CP	'Y'	
	RET	NZ
	;ok, erase the entire diskette
	INC	HL
	LD	(COMADDR+1),HL	;otherwise error at retcom
	;(drop through to erasefile)
;
ERASEFILE:
	CALL	SELECTC
	CALL	DELETEC
	INC	A		;255 returned if not found
	CALL	Z,NOFILE	;no file message if so
	JR	ENDIR

PAGE

TYPE:	;type file
	CALL	FILLFCB
	JR	NZ,TYPERR	;don't allow ?'s in file name
	CALL	SELECTC
	CALL	OPENC		;open the file
	JR	Z,TYPERR	;zero flag indicates not found
	;file opened, read 'til eof
	CALL	CRLF
	LD	BC,128		;read first buffer
;
TYPE0:	;loop on pointer in b,c
	LD	A,C
	CP	128		;end buffer
	JR	C,TYPE1
	CALL	DISKREADC
	JR	NZ,TYPEOF	;hard end of file
	LD	BC,0		;pointer = 0
;
TYPE1:	;read character at pointer in b,c and print
	LD	HL,BUFF
	ADD	HL,BC
	LD	A,(HL)
	CP	EOFILE	
	JR	Z,TYPEND
	PUSH	BC
	CALL	PRINTBC
	CALL	BREAK_KEY
	POP	BC		;recover pointer
	JP	NZ,ENDFN	;abort if break
	INC	BC		;pointer = pointer + 1
	JR	TYPE0		;for another character
;
TYPEOF:	;end of file, check for errors
	DEC	A
	;(drop through to typend)
;
TYPEND:	JP	Z,ENDFN
	CALL	READERR
;
TYPERR:	JP	COMERR

PAGE

SAVE:	;save memory image
	CALL	GETNUMBER	;value to register a
	PUSH	AF		;save it for later
	;should be followed by a file to save the memory image
	CALL	FILLFCB
	JR	NZ,TYPERR	;cannot be ambiguous
	CALL	SELECTC		;may be a disk change
	CALL	MAKEC		;create a new file on disk
	JR	Z,FLDSAVE	;no directory space
	XOR	A
	LD	(CNTREC),A	;clear next record field
	LD	H,A
	POP	AF		;#pages to write is in a, change to #sectors
	LD	L,A
	ADD	HL,HL
	LD	DE,TRAN		;h,l is sector count, d,e is load address
;
SAVE0:	;check for sector count zero
	LD	A,H
	OR	L
	JR	Z,SAVE1		;may be completed
	DEC	HL		;sector count = sector count - 1
	PUSH	HL		;save it for next time around
	LD	HL,128
	ADD	HL,DE
	PUSH	HL		;next dma address saved
	CALL	SETDMA		;current dma address set
	CALL	DISKWRITEC
	POP	DE
	POP	HL		;dma address, sector count
	JR	NZ,FLDSAVE	;may be disk full case
	JR	SAVE0		;for another sector
;
SAVE1:	;end of dump, close the file
	CALL	CLOSEC
	INC	A		;255 becomes 00 if error
	JR	NZ,RETSAVE	;for another command
;
FLDSAVE:
	;must be full or read only disk
	CALL	SAVERR
;
RETSAVE:
	JP	ENDFN

PAGE

RENAME:	;rename a file on a specific disk
	CALL	FILLFCB
	JR	NZ,RENERR2	;must be unambiguous
	LD	A,(SDISK+1)
	PUSH	AF		;save for later compare
	CALL	SELECTC		;disk selected
	CALL	SEARCHCOM	;is new name already there?
	JR	NZ,RENERR3
	;file doesn't exist, move to second half of fcb
	LD	HL,FCB
	LD	DE,FCB+16
	;move 16 characters from h,l to d,e addresses
	LD	BC,16
	LDIR
	;check for = or left arrow
	LD	HL,(COMADDR+1)
	EX	DE,HL
	CALL	DEBLANK
	CP	'='
	JR	Z,REN1		;ok if =
	CP	LA
	JR	NZ,RENERR2
;
REN1:	EX	DE,HL
	INC	HL
	LD	(COMADDR+1),HL	;past delimiter
	;proper delimiter found
	CALL	FILLFCB
	JR	NZ,RENERR2
	;check for drive conflict
	POP	BC		;previous drive number
	LD	HL,SDISK+1
	LD	A,(HL)
	OR	A
	JR	Z,REN2
	;drive name was specified.  same one?
	CP	B
	LD	(HL),B
	JR	NZ,RENERR2
;
REN2:	LD	(HL),B		;store the name in case drives switched
	XOR	A
	LD	(FCB),A
	CALL	SEARCHCOM	;is old file there?
	JR	Z,RENERR1
	;everything is ok, rename the file
	CALL	RENAMC
;
RENEND:	JP	ENDFN
;
RENERR1:
	;no file on disk
	CALL	NOFILE
	JR	RENEND
;
RENERR2:
	;ambigous reference/name conflict
	JP	COMERR
;
RENERR3:
	;file already exists
	CALL	RENERR
	JR	RENEND

PAGE

USER:	;set user number
	CALL	GETNUMBER	;leaves the value in the accumulator
	CP	16
	JR	NC,RENERR2	;must be between 0 and 15
	LD	(SUSER+1),A	;new user number set
	RET

PAGE

CLOCK:	;set CP/A date and time
	LD	HL,CLKADDR	;set default clock address
	LD	B,6		;get 6 numbers
;
CLK0:	PUSH	BC
	PUSH	HL
	CALL	GETNUMBER	;leaves the value in the accumulator
	CALL	SPLITNUM
	JR	NC,RENERR2
	POP	HL
	RLD
	LD	A,C
	RLD
	INC	HL
	POP	BC
	LD	DE,(COMADDR+1)
	LD	A,(DE)		;more number in command buffer?
	OR	A
	RET	Z		;no, return
	INC	DE		;yes, go on
	LD	(COMADDR+1),DE
	DJNZ	CLK0		;count down amount of numbers
	RET

PAGE

EXTCMD:	;add external user function
	CALL	FILLFCB
	JR	NZ,ERRCMD	;must be unambiguous
	LD	A,(FCB+5)
	CP	' '
	JR	NZ,ERRCMD	;must be 4 character name
	CALL	INTRINSIC	;address of new vector in d,l
	JR	C,INTVECFND	;may not be there
	LD	HL,IVTERM-1
	SBC	HL,DE
	JR	C,INTVECFULL	;must be space in table
	PUSH	DE		;save for later operation
	CALL	COMREAD		;load user function
	LD	HL,(SWBOOTA+1)
	LD	A,H
	OR	L
	JR	NZ,EXTCMD0	;already saved
	;save origin bios warm boot address for later reconstruction
	LD	HL,(BIOS+WBOOTO+1)
	LD	(SWBOOTA+1),HL
	;(drop through to extcmd0)
;
EXTCMD0:
	;overload bios warm boot with ccp function
	LD	HL,WBOOTCCP
	LD	(BIOS+WBOOTO+1),HL
	;copy user function name into intrinsic function table
	LD	HL,FCB+1
	LD	BC,4
	POP	DE		;recover table entry pointer
	LDIR
	;calculate new TPA boundaries
TRANC:	LD	HL,TRANM	;current upper TPA address in argument
	PUSH	HL
	XOR	A
TRAND:	LD	BC,0		;TPA delta in argument
	SBC	HL,BC
	LD	(TRANC+1),HL	;save calculated upper TPA address
	;store user function vector in intrinsic function table
	EX	DE,HL		;table entry pointer in h,l
	LD	(HL),E
	INC	HL
	LD	(HL),D
	INC	HL
	LD	(HL),A		;set new table termination
	;write preample (JP BDOS) befor user function
	EX	DE,HL		;start address in h,l
	LD	DE,BDOS+6
	DEC	HL
	LD	(HL),D
	DEC	HL
	LD	(HL),E
	DEC	HL
	LD	(HL),0C3H	;C3 is opcode for JP mnemonic
	LD	(BDOSA),HL
	POP	DE
	DEC	DE
	LD	HL,TRAN
	ADD	HL,BC
	DEC	HL
	LD	A,B
	OR	C
	RET	Z		;TPA delta is zero, nothing to copy 
	LDDR			;copy user function to target memory
	RET			;above TPA and return
;
INTVECFND:
	;user function already exists
	CALL	RENERR
	JR	ERRCMD
;
INTVECFULL:
	;intrinsic function table must be full
	CALL	SAVERR
;
ERRCMD:	;arrive here on command error
	JP	COMERR

PAGE

RESCMD:	;remove all added external user function
	LD	HL,TRANM
	LD	(TRANC+1),HL	;reset current upper TPA address
	XOR	A
	LD	(EIVBEGIN),A	;reset table termination
;
SWBOOTA:LD	HL,0		;origin bios warm boot address in argument
	LD	A,H
	OR	L
	RET	Z		;nothing saved
	;restore origin bios warm boot address for original condition
	LD	(BIOS+WBOOTO+1),HL
	LD	HL,0
	LD	(SWBOOTA+1),HL	;mark SWBOOTA as not saved
	;restore origin bdos entry (JP BDOS)
	LD	HL,BDOS+6
	LD	(BDOSA),HL
	RET

PAGE

WBOOTCCP:
	;warm boot by ccp, hide bdos/bios functionality as
	;long as external user functions were managed by ccp
	LD	SP,BUFF		;default stack on boot time
	LD	A,82H		;cursor on (back to standard)
	CALL	PRINTBC
	LD	A,(DISKA)	;preselect system disk
	LD	C,A	
	JP	CCP+3		;jump to ccp with clear command buffer

PAGE

SWAPDD:	;swap logical disk drive in bdos
	CALL	FILLFCB		;fcb gets first disk
	CALL	SELDSK		;and activate
	PUSH	HL
	CALL	FILLFCB		;fcb gets second disk
	CALL	SELDSK		;and activate
	POP	DE		;1st DPH in d,e and 2nd DPH in h,l
	LD	B,16		;16 byte to copied
;
EXCHDPH:
	;exchange amount of byte given by b between memory
	;area given by d,e and h,l
	LD	A,(DE)
	LD	C,(HL)
	LD	(HL),A
	LD	A,C
	LD	(DE),A
	INC	DE
	INC	HL
	DJNZ	EXCHDPH		;count down bytes in b
	JR	WBOOTCCP	;restart by ccp warm boot
;
SELDSK:	LD	A,(FCB)		;get disk number to select
	DEC	A		;and adapt to bios number
	LD	C,A
	LD	E,1B		;not the first call, bit0=1
	CALL	BIOS+SELDSKO	;activate selected disk
	LD	A,H
	OR	L
	RET	NZ		;return with DPH address in h,l
	JP	COMERR		;no disk, no DPH address

PAGE

USERFUNC:
	;user-defined function
	;load user function and set up for execution
	LD	A,(FCB+1)
	CP	' '
	JR	NZ,USER0
	;no file name, but may be disk switch
	LD	A,(SDISK+1)
	OR	A
	JR	Z,NODISK	;no disk name if 0
	DEC	A
	LD	(CDISK+1),A
;
NODISK:	JP	ENDCOM
;
USER0:	;file name is present
	CALL	COMREAD		;load user function
	JR	LOAD1
;
LOAD0:	LD	(TRANE+1),DE	;preset TPA execution address
	LD	HL,TRANM
	OR	A
	SBC	HL,DE		;above TPA, already loaded?
	JP	C,EXECOM	;...then execute directly
TRANP:	LD	HL,0		;TPA address of precursor execution in argument
	OR	A
	SBC	HL,DE
	JR	Z,LOAD1		;no precursor execution, load
	PUSH	HL
	LD	BC,TRAN
	PUSH	BC
	ADD	HL,BC
	LD	BC,(BDOSA)
	OR	A
	SBC	HL,BC
	POP	HL
	POP	BC
	JR	C,CMOVE0
	CALL	SAVERR
	JP	ENDCOM
;
CMOVE0:	;user function code move ????
	EX	DE,HL
	LDIR
;
LOAD1:	LD	HL,TRAN		;transient program base
	LD	(TRANE+1),HL	;save dma address
	CALL	FILLFCB
	LD	A,(SDISK+1)
	LD	(FCB),A		;drive number set
	LD	HL,FCB+16
	CALL	FILLFCBHL	;move entire fcb to memory
	LD	A,(SDISK+1)
	LD	(FCB+16),A
	XOR	A
	LD	(CNTREC),A	;record number set to zero
COMBLA:	LD	HL,0		;address of first blank position in argument
	;first blank position found
	;(drop through to bmove1)
;
BMOVE1:	LD	B,0
	LD	DE,128+1
	;ready for the move
	;(drop through to bmove2)
;
BMOVE2:	LD	A,(HL)
	LD	(DE),A
	OR	A
	JR	Z,BMOVE3
	;more to move
	INC	B
	INC	HL
	INC	DE
	JR	BMOVE2
;
BMOVE3:	;b has character count
	LD	A,B
	LD	(BUFF),A
	LD	(COMADDR+1),HL
	CALL	CRLF
	;now go to the loaded program
	;(drop through to execom)


EXECOM:	;execute the loaded user function
	call	SAVEUSER	;user code saved
TRANE:	call	TRAN		;TPA address of execution in argument
				;gone to the loaded program

PAGE

ENDCOM:	;end of intrinsic command
	LD	SP,STACK	;may come back here
	CALL	SAVEUSER
	CALL	FILLFCB		;to check for garbage at end of line
	LD	A,(FCB+1)
	SUB	' '
SDISK:	OR	0		;selected disk for current operation in argument
				;none=0, a=1, b=2 ...
	;0 in accumulator if no disk selected, and blank fcb
	JR Z,COMEND
	;(drop through to comerr)

PAGE

COMERR:	;error in command string starting at position
	;'staddr' and ending with first delimiter
	CALL	SAVEUSER
	CALL	CRLF		;space to next line
STADDR:	LD	HL,COMBUF	;starting address of current request in argument
				;h,l address first to print
COMERR0:
	;print characters until blank or zero
	LD	A,(HL)
	CP	' '	
	JR	Z,COMERR1	;not blank
	OR	A
	JR	Z,COMERR1	;not zero, so print it
	PUSH	HL
	CALL	PRINTBC		;echo command buffer
	POP	HL
	INC	HL
	JR	COMERR0		;for another character
;
COMERR1:
	;print question mark,and delete sub file
	LD	A,'?'
	CALL	PRINTBC
;
COMERR2:
	;handle potential breack condistions too
	CALL	DEL_SUB
;
COMEND:	JP	CCPE		;restart with next command

PAGE

;
;	data areas
;
RDMSG:	DB	"Read Error",07H,'$'
NOFMSG:	DB	"No File",'$'
ERMSG:	DB	"ALL (Y/N)?",'$'
FULLMSG:DB	"No Space",07H,'$'
RENMSG:	DB	"File exists",07H,'$'
BRKMSG:	DB	"*break*",07H,'$'


;
;	submit file control block
;
SUBFCB:	DB	0,"$$$     "	;file name is $$$
	DB	"SUB",0,0	;file type is sub
SUBMOD:	DB	0		;module number
SUBRC:	DS	1		;record count filed
	DS	16		;disk map
SUBCR:	DS	1		;current record to read


COMTYPE:DB	"COM"		;for com files

PAGE

;
;	intrinsic function table
;	zero termination, last byte at IVTERM
;	16 entries, 12 predefined, 4 user extension
;	singel entry has a 4 byte name and a 2byte vector:
;		DB	"NAME"
;		DW	VECTOR
;
INTVEC:	DB	"DIR "		;directory search
	DW	DIRECT
	;
	DB	"ERA "		;file erase
	DW	ERASE
	;
	DB	"TYPE"		;type file
	DW	TYPE
	;
	DB	"SAVE"		;save memory image
	DW	SAVE
	;
	DB	"REN "		;file rename
	DW	RENAME
	;
	DB	"USER"		;user number
	DW	USER
	;
	;	CP/A extensions
	;
	DB	"CLK "		;set CP/A date and time
	DW	CLOCK
	;
	DB	"EXT "		;add external user function to
	DW	EXTCMD		;the intrinsic function table
	;
	DB	"RES "		;remove all added external user
	DW	RESCMD		;functions
	;
	DB	"SWAP"		;swap logical disk drive in BDOS
	DW	SWAPDD
	;
	DB	"===="		;placeholder for CP/A function GO
	DW	CCP		;never change this vector
	DB	"GO  "		;start last user function from TRAN
	DW	CCP
	;
EIVBEGIN:
EXTV0:	DS	4,0		;1st entry for external user function
	DW	0
	;
EXTV1:	DS	4,0		;2nd entry for external user function
	DW	0
	;
EXTV2:	DS	4,0		;3rd entry for external user function
	DW	0
	;
EXTV3:	DS	4,0		;4th entry for external user function
	DW	0
	;
IVTERM:	DB	0		;termination



ENTSP:	DS	2*12,0FDH	;12 level stack
STACK:	DB	0FEH

;
;	next module
;
	END
